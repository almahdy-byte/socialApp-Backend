const compressText = (text) => {
    const compressed = pako.gzip(text);
    return btoa(String.fromCharCode(...compressed)); 
};

const dCompressText = (base64Str) => {
    const binaryString = atob(base64Str); // base64 إلى binary string
    const byteArray = new Uint8Array([...binaryString].map(char => char.charCodeAt(0)));
    return pako.inflate(byteArray, { to: 'string' });
};

const messageCompression = (text) => {
    console.log({text, length: text.length});
    const compressed = compressText(text);
    console.log({compressed, length: compressed.length});
    return compressed;
};

const messageDCompression = (compressedText) => dCompressText(compressedText);

let selectedUserId = null;
let profileImg = localStorage.getItem('profileImage');
console.log({profileImg});

const socket = io('http://localhost:3000', {
    auth: {
        token: `user ${localStorage.getItem('token')}`
    }
});

socket.on('connect_error', (err) => {
    console.log({ err });
});

// Load users from API or fallback to static users
async function loadUsers() {
    try {
        const response = await fetch("http://localhost:3000/user/get-friends", {
            headers: {
                authorization: `user ${localStorage.getItem('token')}`
            }
        });
        const users = await response.json();
        displayUsers(users.friends);
    } catch (error) {
        console.error("Error loading users, using static users:", error);
        displayUsers(staticUsers);
    }
}

// Display users in the sidebar
function displayUsers(users) {
    const usersList = document.getElementById("users");
    usersList.innerHTML = "";

    // Add AI option to the users list
    const aiListItem = document.createElement("li");
    aiListItem.innerHTML = `
        <img src="ai_icon.png" alt="AI" class="user-image">
        AI Chat
    `;
    aiListItem.onclick = () => selectAIChat();
    usersList.appendChild(aiListItem);

    // Display normal users
    users.forEach(user => {
        const li = document.createElement("li");
        li.innerHTML = `
            <img src="${user.profilePicture.secure_url}" alt="${user.userName}'s Image" class="user-image">
            ${user.userName}
        `;
        li.onclick = () => selectUser(user._id, user.userName, user.profilePicture.secure_url);
        usersList.appendChild(li);
    });
}

// Select user and load chat
function selectUser(userId, userName, profileImage) {
    selectedUserId = userId;
    if (profileImage) {
        document.getElementById("chatUserImg").style.display = "inline";
    }
    document.getElementById("chatUserImg").src = profileImage || "default.png";
    document.getElementById("chatUserName").textContent = userName;
    loadMessages(selectedUserId);
}

// Load messages between current user and selected user
async function loadMessages(userId) {
    try {
        const response = await fetch(`http://localhost:3000/chat/${userId}`, {
            headers: {
                authorization: `user ${localStorage.getItem('token')}`
            }
        });
        let res = await response.json();
        const messages = res.messages;

        if (Array.isArray(messages)) {
            displayMessages(messages);
        } else {
            console.error("Received data is not an array:", messages);
            displayMessages([]);  // Fallback to static messages
        }
    } catch (error) {
        console.error("Error loading messages:", error);
        displayMessages([]);  // Fallback to static messages
    }
}

// Display messages in the chat box
function displayMessages(messages) {
    const messagesBox = document.getElementById("messages");
    messagesBox.innerHTML = "";  // Clear existing messages

    messages.forEach(msg => {
        addMessage(msg, msg.senderId._id.toString() === selectedUserId.toString() ? "received" : "sent");
    });
}

// Add message to chat UI
function addMessage(msg, type) {
    

    const messagesBox = document.getElementById("messages");
    const div = document.createElement("div");
    div.className = `message ${type}`;

    div.innerHTML = `
        <img src="${msg.senderId.profilePicture.secure_url || profileImg}" alt="User Image">
        <div class="content">
            <strong>${type == "received" ? msg.senderId.userName : "Me"}</strong>
            <p>${messageDCompression(msg.body)}</p>
        </div>
    `;

    messagesBox.appendChild(div);
    messagesBox.scrollTop = messagesBox.scrollHeight;
}

// Send message (WITHOUT SOCKET)
function sendMessage() {
    const input = document.getElementById("messageInput");
    const message = input.value.trim();

    if (message && selectedUserId) {
        const profileImgNow = localStorage.getItem('profileImage') || 'default.png';
        socket.emit("private_message", { to: selectedUserId, message: messageCompression(message)}); // DISABLED SOCKET
        const messagesBox = document.getElementById("messages");
        const div = document.createElement("div");
        div.className = `message sent`;
        console.log({message , profileImg});
        
        div.innerHTML = `
            <img src="${profileImgNow}" alt="User Image">
            <div class="content">
                <strong>Me</strong>
                <p>${message}</p>
            </div>
        `;

        messagesBox.appendChild(div);
        messagesBox.scrollTop = messagesBox.scrollHeight;
        input.value = "";
    }
}

// ! Receive messages from the server (DISABLED SOCKET)
socket.on("private_message", (msg) => {
    console.log({msg});
    addMessage(msg, "received");
});

// Load users on page load
loadUsers();


